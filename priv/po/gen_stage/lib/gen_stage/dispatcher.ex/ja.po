msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2017-03-06 11:20+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: @callback subscribe/3
#: lib/gen_stage/dispatcher.ex:37
msgid "Called every time the producer gets a new subscriber.\n"
msgstr ""

#. TRANSLATORS: @callback notify/2
#: lib/gen_stage/dispatcher.ex:93
msgid ""
"Used to send a notification to all consumers.\n"
"\n"
"In case the dispatcher is doing buffering, notify must keep\n"
"the ordering guarantees. It is recommended for the notification\n"
"to be sent with `Process.send/3` and the `[:noconnect]` option\n"
"as the consumers are all monitored by the producer. For example:\n"
"\n"
"    Process.send(consumer, {consumer_ref, msg}, [:noconnect])\n"
msgstr ""

#. TRANSLATORS: @callback dispatch/3
#: lib/gen_stage/dispatcher.ex:65
msgid ""
"Called every time a producer wants to dispatch an event.\n"
"\n"
"The events will always be a non empty list. This callback may\n"
"receive more events than previously asked and therefore must\n"
"return events it cannot not effectively deliver as part of its\n"
"return tuple. Any `leftover_events` will be stored by producers\n"
"in their buffer.\n"
"\n"
"It is important to emphasize that `leftover_events` can happen\n"
"in any dispatcher implementation. After all, a consumer can\n"
"subscribe, ask for events and crash. Eventually the events\n"
"the consumer asked will be delivered while the consumer no longer\n"
"exists, meaning they must be returned as left_over events until\n"
"another consumer subscribes.\n"
"\n"
"It is guaranteed the reference given in `from` points to a\n"
"reference previously given in subscribe. It is also recommended\n"
"for events to be sent with `Process.send/3` and the `[:noconnect]`\n"
"option as the consumers are all monitored by the producer. For\n"
"example:\n"
"\n"
"    Process.send(consumer, {:\"$gen_consumer, {self(), consumer_ref}, "
"events}, [:noconnect])\n"
"\n"
msgstr ""

#. TRANSLATORS: @callback init/1
#: lib/gen_stage/dispatcher.ex:32
msgid ""
"Called on initialization with the options given on `c:GenStage.init/1`.\n"
msgstr ""

#. TRANSLATORS: @callback ask/3
#: lib/gen_stage/dispatcher.ex:52
msgid ""
"Called every time a consumer sends demand.\n"
"\n"
"The demand will always be a positive integer (more than 0).\n"
"This callback must return the `actual_demand` as part of its\n"
"return tuple. The returned demand is then sent to producers.\n"
"\n"
"It is guaranteed the reference given in `from` points to a\n"
"reference previously given in subscribe.\n"
msgstr ""

#. TRANSLATORS: @callback cancel/2
#: lib/gen_stage/dispatcher.ex:43
msgid ""
"Called every time a subscription is cancelled or the consumer goes down.\n"
"\n"
"It is guaranteed the reference given in `from` points to a reference\n"
"previously given in subscribe.\n"
msgstr ""

#. TRANSLATORS: Elixir.GenStage.Dispatcher Summary
#: lib/gen_stage/dispatcher.ex:2
msgid ""
"This module defines the behaviour used by `:producer` and\n"
"`:producer_consumer` to dispatch events.\n"
"\n"
"When using a `:producer` or `:producer_consumer`, the dispatcher\n"
"may be configured on init as follows:\n"
"\n"
"    {:producer, state, dispatcher: GenStage.BroadcastDispatcher}\n"
"\n"
"Some dispatchers may require options to be given on initialization,\n"
"those can be done with a tuple:\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: 0..3}}\n"
"\n"
"Elixir ships with the following dispatcher implementations:\n"
"\n"
"  * `GenStage.DemandDispatcher` - dispatches the given batch of\n"
"    events to the consumer with the biggest demand in a FIFO\n"
"    ordering. This is the default dispatcher.\n"
"\n"
"  * `GenStage.BroadcastDispatcher` - dispatches all events to all\n"
"    consumers. The demand is only sent upstream once all consumers\n"
"    ask for data.\n"
"\n"
"  * `GenStage.PartitionDispatcher` - dispatches all events to a\n"
"    fixed amount of consumers that works as partitions according\n"
"    to a hash function.\n"
"\n"
msgstr ""
