msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-09 12:06+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: @callback notify/2
#: lib/gen_stage/dispatcher.ex:93
msgid ""
"Used to send a notification to all consumers.\n"
"\n"
"In case the dispatcher is doing buffering, notify must keep\n"
"the ordering guarantees. It is recommended for the notification\n"
"to be sent with `Process.send/3` and the `[:noconnect]` option\n"
"as the consumers are all monitored by the producer. For example:\n"
"\n"
"    Process.send(consumer, {consumer_ref, msg}, [:noconnect])\n"
msgstr ""
"すべての消費者に通知を送信するために使用されます。\n"
"\n"
"ディスパッチャがバッファリングを行っている場合、通知は順番を\n"
"保証する必要があります。消費者はすべて生産者にモニターされていますので\n"
"通知は`Process.send/3`と`[:noconnect]`オプションを使用して送信する\n"
"ことを勧めます。たとえば、\n"
"\n"
"    Process.send(consumer, {consumer_ref, msg}, [:noconnect])\n"

#. TRANSLATORS: @callback subscribe/3
#: lib/gen_stage/dispatcher.ex:37
msgid "Called every time the producer gets a new subscriber.\n"
msgstr "生産者が新しい購読者を所得する度に呼び出されます。\n"

#. TRANSLATORS: @callback dispatch/3
#: lib/gen_stage/dispatcher.ex:65
msgid ""
"Called every time a producer wants to dispatch an event.\n"
"\n"
"The events will always be a non empty list. This callback may\n"
"receive more events than previously asked and therefore must\n"
"return events it cannot not effectively deliver as part of its\n"
"return tuple. Any `leftover_events` will be stored by producers\n"
"in their buffer.\n"
"\n"
"It is important to emphasize that `leftover_events` can happen\n"
"in any dispatcher implementation. After all, a consumer can\n"
"subscribe, ask for events and crash. Eventually the events\n"
"the consumer asked will be delivered while the consumer no longer\n"
"exists, meaning they must be returned as left_over events until\n"
"another consumer subscribes.\n"
"\n"
"It is guaranteed the reference given in `from` points to a\n"
"reference previously given in subscribe. It is also recommended\n"
"for events to be sent with `Process.send/3` and the `[:noconnect]`\n"
"option as the consumers are all monitored by the producer. For\n"
"example:\n"
"\n"
"    Process.send(consumer, {:\"$gen_consumer, {self(), consumer_ref}, "
"events}, [:noconnect])\n"
"\n"
msgstr ""
"生産者がイベントをディスパッチしようとする度に呼び出されます。\n"
"\n"
"イベントは常に空ではないリストです。このコールバックは先に要求された\n"
"以上のイベントを受け取る場合があります。そのため、返り値のタプルの中で\n"
"実際に配信できなかったイベントを返さなければなりません。`leftover_events`は\n"
"生産者により自身のバッファに格納されます。\n"
"\n"
"`leftover_events`はどんなディスパッチャ実装でも生じる可能性があることを\n"
"強調することは重要です。結局のところ、消費者は購読し、イベントを要求し、\n"
"クラッシュすることができます。最終的に、消費者に要求されたイベントは、\n"
"消費者がもはや存在しなくても配信されます。これは、それらのイベントは別の\n"
"消費者が購読するまで残り物として返されなければならないことを意味します。\n"
"\n"
"`from`で指定されるリファレンスが、購読時に指定されたリファレンスを指すこと"
"は\n"
"保証されています。消費者はすべて生産者によりモニターされていますので、\n"
"イベントは`Process.send/3`と`[:noconnect]`オプションを使用して送信する\n"
"ことを勧めます。たとえば、\n"
"\n"
"\n"
"    Process.send(consumer, {:\"$gen_consumer, {self(), consumer_ref}, "
"events}, [:noconnect])\n"
"\n"

#. TRANSLATORS: @callback init/1
#: lib/gen_stage/dispatcher.ex:32
msgid ""
"Called on initialization with the options given on `c:GenStage.init/1`.\n"
msgstr ""
"初期化時に`c:GenStage.init/1`で指定されているオプションと共に呼び出されま"
"す。\n"

#. TRANSLATORS: @callback ask/3
#: lib/gen_stage/dispatcher.ex:52
msgid ""
"Called every time a consumer sends demand.\n"
"\n"
"The demand will always be a positive integer (more than 0).\n"
"This callback must return the `actual_demand` as part of its\n"
"return tuple. The returned demand is then sent to producers.\n"
"\n"
"It is guaranteed the reference given in `from` points to a\n"
"reference previously given in subscribe.\n"
msgstr ""
"消費者が要求を送信する度に呼び出されます。\n"
"\n"
"要求は常に（0より大きい）正の整数です。このコールバックは\n"
"返り値のタプルの中で`actual_demand`を返す必要があります。\n"
"この要求はその後生産者に送信されます。\n"
"\n"
"`from`で指定されるリファレンスが、購読時に指定されたリファレンスを指すこと"
"は\n"
"保証されています。\n"

#. TRANSLATORS: @callback cancel/2
#: lib/gen_stage/dispatcher.ex:43
msgid ""
"Called every time a subscription is cancelled or the consumer goes down.\n"
"\n"
"It is guaranteed the reference given in `from` points to a reference\n"
"previously given in subscribe.\n"
msgstr ""
"購読がキャンセルされる度に、または、消費者がダウンする度に呼び出されます。\n"
"\n"
"`from`で指定されるリファレンスが、購読時に指定されたリファレンスを指すこと"
"は\n"
"保証されています。\n"

#. TRANSLATORS: Elixir.GenStage.Dispatcher Summary
#: lib/gen_stage/dispatcher.ex:2
msgid ""
"This module defines the behaviour used by `:producer` and\n"
"`:producer_consumer` to dispatch events.\n"
"\n"
"When using a `:producer` or `:producer_consumer`, the dispatcher\n"
"may be configured on init as follows:\n"
"\n"
"    {:producer, state, dispatcher: GenStage.BroadcastDispatcher}\n"
"\n"
"Some dispatchers may require options to be given on initialization,\n"
"those can be done with a tuple:\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: 0..3}}\n"
"\n"
"Elixir ships with the following dispatcher implementations:\n"
"\n"
"  * `GenStage.DemandDispatcher` - dispatches the given batch of\n"
"    events to the consumer with the biggest demand in a FIFO\n"
"    ordering. This is the default dispatcher.\n"
"\n"
"  * `GenStage.BroadcastDispatcher` - dispatches all events to all\n"
"    consumers. The demand is only sent upstream once all consumers\n"
"    ask for data.\n"
"\n"
"  * `GenStage.PartitionDispatcher` - dispatches all events to a\n"
"    fixed amount of consumers that works as partitions according\n"
"    to a hash function.\n"
"\n"
msgstr ""
"このモジュールはイベントをディスパッチするために`:producer`と\n"
"`:producer_consumer`で使用されるビヘイビアを定義します。\n"
"\n"
"`:producer`または`:producer_consumer`を使用する際、ディスパッチャは\n"
"初期化時に次のように構成することができます。\n"
"\n"
"    {:producer, state, dispatcher: GenStage.BroadcastDispatcher}\n"
"\n"
"ディスパッチャの中には初期化時にオプションを指定する必要があるものがありま"
"す。\n"
"その場合はタプルで指定します。\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: 0..3}}\n"
"\n"
"Elixirには次のディスパッチャ実装が同梱されています。\n"
"\n"
"  * `GenStage.DemandDispatcher` - 最大の要求を持つ消費者に指定した\n"
"    数のイベントをFIFO順序でディスパッチします。これがデフォルトの\n"
"    ディスパッチャです。\n"
"\n"
"  * `GenStage.BroadcastDispatcher` - すべての消費者にすべてのイベントを\n"
"    ディスパッチします。すべての消費者がデータを要求すると要求が上流に\n"
"    送信されるだけです。\n"
"\n"
"  * `GenStage.PartitionDispatcher` - ハッシュ関数に従い、パーティション\n"
"    として動作する一定数の消費者にすべてのイベントをディスパッチします。\n"
"\n"
"\n"
