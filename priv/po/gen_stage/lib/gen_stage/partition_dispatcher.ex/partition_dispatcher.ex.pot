#. TRANSLATORS: Elixir.GenStage.PartitionDispatcher Summary
#: lib/gen_stage/partition_dispatcher.ex:2 
msgid ""
"A dispatcher that sends events according to partitions.\n"
"\n"
"Keep in mind that, if partitions are not evenly distributed,\n"
"a backed-up partition will slow all other ones.\n"
"\n"
"## Options\n"
"\n"
"The partition dispatcher accepts the following options\n"
"on initialization:\n"
"\n"
"  * `:partitions` - the number of partitions to dispatch to. It may be\n"
"    an integer with a total number of partitions, where each partition\n"
"    is named from 0 up to `integer - 1`. For example, `partitions: 4`\n"
"    will contain 4 partitions named 0, 1, 2 and 3.\n"
"\n"
"    It may also be an enumerable that specifies the name of every partition.\n"
"    For instance, `partitions: [:odd, :even]` will build two partitions,\n"
"    named `:odd` and `:even`.\n"
"\n"
"  * `:hash` - the hashing algorithm, which receives the event and returns\n"
"    a tuple with two elements, containing the event and the partition.\n"
"    The partition must be one of the partitions specified in `:partitions`\n"
"    above. The default uses `&:erlang.phash2(&1, Enum.count(partitions))`\n"
"    on the event to select the partition.\n"
"\n"
"### Examples\n"
"\n"
"To start a producer with four partitions named 0, 1, 2 and 3:\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, partitions: 0..3}}\n"
"\n"
"To start a producer with two partitions named `:odd` and `:even`:\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, partitions: [:odd, :even]}}\n"
"\n"
"## Subscribe options\n"
"\n"
"When subscribing to a `GenStage` with a partition dispatcher the following\n"
"option is required:\n"
"\n"
"  * `:partition` - the name of the partition. The partition must be one of\n"
"    the partitions specified in `:partitions` above.\n"
"\n"
"### Examples\n"
"\n"
"The partition function can be given either on `init`'s subscribe_to:\n"
"\n"
"    {:consumer, :ok, subscribe_to: [{producer, partition: 0}]}\n"
"\n"
"Or when calling `sync_subscribe`:\n"
"\n"
"    GenStage.sync_subscribe(consumer, to: producer, partition: 0)\n"
"\n"
msgstr ""
