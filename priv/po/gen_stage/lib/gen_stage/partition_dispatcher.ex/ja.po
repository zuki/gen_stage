msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-09 11:17+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: Elixir.GenStage.PartitionDispatcher Summary
#: lib/gen_stage/partition_dispatcher.ex:2
msgid ""
"A dispatcher that sends events according to partitions.\n"
"\n"
"Keep in mind that, if partitions are not evenly distributed,\n"
"a backed-up partition will slow all other ones.\n"
"\n"
"## Options\n"
"\n"
"The partition dispatcher accepts the following options\n"
"on initialization:\n"
"\n"
"  * `:partitions` - the number of partitions to dispatch to. It may be\n"
"    an integer with a total number of partitions, where each partition\n"
"    is named from 0 up to `integer - 1`. For example, `partitions: 4`\n"
"    will contain 4 partitions named 0, 1, 2 and 3.\n"
"\n"
"    It may also be an enumerable that specifies the name of every "
"partition.\n"
"    For instance, `partitions: [:odd, :even]` will build two partitions,\n"
"    named `:odd` and `:even`.\n"
"\n"
"  * `:hash` - the hashing algorithm, which receives the event and returns\n"
"    a tuple with two elements, containing the event and the partition.\n"
"    The partition must be one of the partitions specified in `:partitions`\n"
"    above. The default uses `&:erlang.phash2(&1, Enum.count(partitions))`\n"
"    on the event to select the partition.\n"
"\n"
"### Examples\n"
"\n"
"To start a producer with four partitions named 0, 1, 2 and 3:\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: 0..3}}\n"
"\n"
"To start a producer with two partitions named `:odd` and `:even`:\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: [:odd, :even]}}\n"
"\n"
"## Subscribe options\n"
"\n"
"When subscribing to a `GenStage` with a partition dispatcher the following\n"
"option is required:\n"
"\n"
"  * `:partition` - the name of the partition. The partition must be one of\n"
"    the partitions specified in `:partitions` above.\n"
"\n"
"### Examples\n"
"\n"
"The partition function can be given either on `init`'s subscribe_to:\n"
"\n"
"    {:consumer, :ok, subscribe_to: [{producer, partition: 0}]}\n"
"\n"
"Or when calling `sync_subscribe`:\n"
"\n"
"    GenStage.sync_subscribe(consumer, to: producer, partition: 0)\n"
"\n"
msgstr ""
"`partitions`にしたがってイベントを分割して送信するディスパッチャです。\n"
"\n"
"パーティションが均等に分散されていない場合、遅いパーティションが\n"
"他のすべてのパーティションを遅くすることに留意してください。\n"
"\n"
"## オプション\n"
"\n"
"このディスパッチャは初期化時に次のオプションを受け付けます。\n"
"\n"
"  * `:partitions` - ディスパッチするパーティションの数です。パーティション"
"の\n"
"    総数を表す整数を指定できます。この場合、各パーティションは0から`integer "
"- 1`\n"
"    という名前が付けられます。たとえば、`partitions: 4`は、0, 1, 2 , 3という"
"名前の\n"
"    4つのパーティションを含みます。\n"
"\n"
"    それぞれのパーティションの名前を指定するenumerableを指定することできま"
"す。\n"
"    たとえば、`partitions: [:odd, :even]`は、`:odd`と`:even`という名前の\n"
"    2つのパーティションを作成します。\n"
"\n"
"  * `:hash` - ハッシングアルゴリズムです。これはイベントを受け取り、イベント"
"と\n"
"    パーティションを含む2要素タプルを返します。パーティションは`:"
"partitions`\n"
"    オプションで説明したパーティションのいずれかでなければなりません。\n"
"    デフォルトではパーティションを選択するイベントに対して\n"
"    `&:erlang.phash2(&1, Enum.count(partitions))`を使用します。\n"
"\n"
"### 例\n"
"\n"
"0, 1, 2, 3という名前の4つのパーティションを持つ生産者を起動するためには\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: 0..3}}\n"
"\n"
"`:odd`と`:even`という名前の2つのパーティションを持つ生産者を起動するために"
"は\n"
"\n"
"    {:producer, state, dispatcher: {GenStage.PartitionDispatcher, "
"partitions: [:odd, :even]}}\n"
"\n"
"## 購読オプション\n"
"\n"
"このディスパッチャを持つ`GenStage`を購読する際には次のオプションを指定する\n"
"必要があります。\n"
"\n"
"  * `:partition` - パーティションの名前です。これは先に`:partitions`オプショ"
"ンで\n"
"    説明したパーティションのいずれかでなければなりません。\n"
"\n"
"### 例\n"
"\n"
"分割関数は`init`の`:subscribe_to`オプション\n"
"\n"
"    {:consumer, :ok, subscribe_to: [{producer, partition: 0}]}\n"
"\n"
"または、`sync_subscribe`を呼び指す際に指定できます。\n"
"\n"
"    GenStage.sync_subscribe(consumer, to: producer, partition: 0)\n"
"\n"
