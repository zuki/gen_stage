#. TRANSLATORS: Elixir.GenStage.BroadcastDispatcher Summary
#: lib/gen_stage/broadcast_dispatcher.ex:2 
msgid ""
"A dispatcher that accumulates demand from all consumers\n"
"before broadcasting events to all of them.\n"
"\n"
"If a producer uses `GenStage.BroadcastDispatcher`, its subscribers\n"
"can specify an optional `:selector` function that receives the event\n"
"and returns a boolean in the subscription options.\n"
"\n"
"Assume `producer` and `consumer` are stages exchanging events of type\n"
"`%{:key => String.t, any => any}`, then by calling\n"
"\n"
"    GenStage.sync_subscribe(consumer,\n"
"      to: producer,\n"
"      selector: fn %{key: key} -> String.starts_with?(key, \"foo-\") end)\n"
"\n"
"`consumer` will receive only the events broadcasted from `producer`\n"
"for which the selector function returns a truthy value.\n"
"\n"
"The `:selector` option can be specified in sync and async subscriptions,\n"
"as well as in the `:subscribe_to` list in the return tuple of\n"
"`c:GenStage.init/1`. For example:\n"
"\n"
"    def init(:ok) do\n"
"      {:consumer, :ok, subscribe_to:\n"
"        [{producer, selector: fn %{key: key} -> String.starts_with?(key, \"foo-\") end}]}`\n"
"    end\n"
"\n"
msgstr ""
