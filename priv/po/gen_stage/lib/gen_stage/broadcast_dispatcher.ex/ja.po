msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-03-09 16:16+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: Elixir.GenStage.BroadcastDispatcher Summary
#: lib/gen_stage/broadcast_dispatcher.ex:2
msgid ""
"A dispatcher that accumulates demand from all consumers\n"
"before broadcasting events to all of them.\n"
"\n"
"If a producer uses `GenStage.BroadcastDispatcher`, its subscribers\n"
"can specify an optional `:selector` function that receives the event\n"
"and returns a boolean in the subscription options.\n"
"\n"
"Assume `producer` and `consumer` are stages exchanging events of type\n"
"`%{:key => String.t, any => any}`, then by calling\n"
"\n"
"    GenStage.sync_subscribe(consumer,\n"
"      to: producer,\n"
"      selector: fn %{key: key} -> String.starts_with?(key, \"foo-\") "
"end)\n"
"\n"
"`consumer` will receive only the events broadcasted from `producer`\n"
"for which the selector function returns a truthy value.\n"
"\n"
"The `:selector` option can be specified in sync and async "
"subscriptions,\n"
"as well as in the `:subscribe_to` list in the return tuple of\n"
"`c:GenStage.init/1`. For example:\n"
"\n"
"    def init(:ok) do\n"
"      {:consumer, :ok, subscribe_to:\n"
"        [{producer, selector: fn %{key: key} -> String.starts_with?(key, "
"\"foo-\") end}]}`\n"
"    end\n"
"\n"
msgstr ""
"すべての消費者からの要求を蓄積して、すべての消費者にイベントを\n"
"ブロードキャストするディスパッチャです。\n"
"\n"
"生産者が`GenStage.BroadcastDispatcher`を使用している場合、その購読者は\n"
"購読オプションで、イベントを受け取り、ブール値を返す`:selector`関数を指"
"定\n"
"できます。\n"
"\n"
"`producer`と`consumer`が`%{:key => String.t, any => any}`型のイベントを\n"
"交換するステージだと仮定します。そして、次を呼び出すことで\n"
"\n"
"    GenStage.sync_subscribe(consumer,\n"
"      to: producer,\n"
"      selector: fn %{key: key} -> String.starts_with?(key, \"foo-\") "
"end)\n"
"\n"
"`consumer`は`producer`がブロードキャストしたイベントのうち、選択関数が\n"
"truty値を返すイベントのみを受信します。\n"
"\n"
"`:selector`オプションは同期的購読関数や非同期的購読関数だけでなく、\n"
"`c:GenStage.init/1`が返すタプルの中の`:subscribe_to`リストでも指定できま"
"す。\n"
"たとえば、\n"
"\n"
"    def init(:ok) do\n"
"      {:consumer, :ok, subscribe_to:\n"
"        [{producer, selector: fn %{key: key} -> String.starts_with?(key, "
"\"foo-\") end}]}`\n"
"    end\n"
"\n"
